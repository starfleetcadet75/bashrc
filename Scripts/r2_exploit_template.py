#!/usr/bin/env python

import r2pipe

# Visual graph mode: `VV`
# Visual panels mode (always remember to use!): `V!`
#   - Use TAB to jump between panels
#   - Use j/k/l/; to navigate and resize
#   - Step Into: s
#   - Step Over: S
#   - Continue: <F9>
#   - Run to Cursor: <F4>
#   - Toggle Breakpoint: b or <F2>
#
# 
# Debug Profiles
#
# Run with `r2 -R profile.rr2 -d program`
# or "e dbg.profile=program.rr2"
#
# ```
# #!/usr/bin/rarun2
#
# program=./prog
# stdin="AAAAAAAAAAAAAAA"
# stdout=
# arg1=foo
# arg2=bar
# ```
#
# Generate De Bruijn Pattern
# ```
# $ ragg2 -P 200 -r > pattern.txt
# $ cat pattern.txt
# AAABAACAADAAEAAFAAGAAHAAI… <truncated> …7AA8AA9AA0ABBABCABDABEABFA
# 
# $ cat profile.rr2
# #!/usr/bin/rarun2
# stdin=./pattern.txt
# 
# $ r2 -R profile.rr2 -d <program>
# > dc
# > wopO eip  // Gets the offset from eip assuming it has been overwritten
# ```

####################################
# Information
####################################

# entry point
def entry_point():
    print(r2.cmd('ieq'))

# imports
def imports(verbose=False):
    if verbose:
        print(r2.cmd('ii'))
    else:
        print(r2.cmd('iiq'))

# sections
def sections():
    print(r2.cmd('iS'))

# list functions
def list_functions():
    print(r2.cmd('afl'))

# get offest of a symbol
def offset_of_symbol(symbol):
    print(r2.cmd('?v ' + symbol))

####################################
# Debugging
####################################

# continue
def cont():
    print(r2.cmd('dc'))

# continue until address is reached
def cont_until(addr):
    print(r2.cmd('dcu ' + addr))

# step into
def step_into():
    print(r2.cmd('ds'))

# step over
def step_over():
    print(r2.cmd('dso'))

# continue until return
def step_out():
    print(r2.cmd('dcr; ds'))

# display backtrace
def backtrace():
    print(r2.cmd('dbt'))

# set breakpoint
def breakpoint(addr):
    print(r2.cmd('db ' + addr))

# remove breakpoint
def remove_breakpoint(addr):
    print(r2.cmd('db -' + addr))

# list memory maps
def memory_map():
    print(r2.cmd('dm'))

# get the stack pointer
def get_rsp():
    return r2.cmdj('drj')['rsp']

# get the instruction pointer
def get_rip():
    return r2.cmdj('drj')['rip']

# get registers
def get_registers():
    return r2.cmdj('dr=')

r2 = r2pipe.open('http://192.168.100.64:1337')
print(r2.cmd('aaa'))
print(r2.cmd('doo'))  # reopen in debugging mode
cont()
breakpoint('entry0')
print('Hit breakpoint at: %s' % r2.cmd('s'))
